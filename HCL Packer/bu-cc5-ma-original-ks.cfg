#--------------------------------------------------------------------------
# Kickstart file for RHEL8 (services for sensitive data)
#--------------------------------------------------------------------------

# Install via network
url --url=http://pxe.uio.no/rhel8/6/x86_64


# System authorization information
authselect select sssd with-sudo

# System bootloader configuration
bootloader --location=mbr

# Clear the Master Boot Record
zerombr

# Partition clearing information

%include /tmp/clear-include


# Use cmdline mode install
#  --> http://pykickstart.readthedocs.io/en/latest/kickstart-docs.html#graphical-or-text-or-cmdline
cmdline

# Disable firstboot script
firstboot --disable

# System keyboard
keyboard --xlayouts=no

# System language
lang en_US.utf8

# Installation logging
#logging --level=info

# Network information
%include /tmp/net-include

# What to do after installation (default = reboot)
reboot

# Root password
rootpw --iscrypted $6$j4138rwirw$CLuDYhIhqkEVRw64yz6S6SDIk4aVosmI9BYOrfAU32TN7tQXVRpVR2I0eIPKtuswMRfq3i37hwkgQ4d.Za0AL0

# SELinux configuration
selinux --enforcing

# Firewall configuration
firewall --enabled --remove-service cockpit

# X Window System

skipx


# System timezone
timezone --ntpservers=ntp1.uio.no,ntp2.uio.no --utc Europe/Oslo

# Disk partitioning information

%include /tmp/part-include
%include /tmp/logvol-include


#--------------------------------------------------------------------
# PACKAGES
#--------------------------------------------------------------------
%packages

# TIP: List groups and environments on an existing install with
#      "yum grouplist -v"


# Package environment groups
@^server-product-environment

# Package groups
@system-tools

# Single packages
dnf-utils
zsh
sssd
sssd-client
sssd-tools
perl
policycoreutils-python-utils
PackageKit-command-not-found
postfix
redhat-lsb
tcsh
-kdebase
-kdeutils-printer-applet
-konq-plugins
-ypbind
-gnome-initial-setup


%end


#--------------------------------------------------------------------
# PRE SCRIPT
#--------------------------------------------------------------------
%pre --interpreter /bin/sh

# Capturing kernel parameters
set -- `cat /proc/cmdline`
for I in $*; do
    case "$I" in
        *=*)
            x=`echo $I | cut -d= -f1`
            y=`echo $I | cut -d= -f2`
            z=`echo $x | tr . _`;
            eval $z=$y
            ;;
    esac
done

# Find correct disk device

  if [ "x$diskdev" == "x" ]; then
    # Determine the disk device of the system
    disk_device=""
    for file in 'xvda' 'cciss!c0d0' 'sda' 'hda' 'vda' 'nvme0n1'; do
    if [ -e "/sys/block/$file" ]; then
        disk_device=$file
        break
    fi
    done

    # Workaround for Dell servers that sometimes have a SD card flash
    # drive and other stuff
    if [ "$disk_device" = "sda" ]; then
    product=$(dmidecode -s system-product-name | awk '{print $1}')
    if [ "$product" = "PowerEdge" ]; then
        for x in a b c d e; do
        diskmodel=$(cat /sys/block/sd$x/device/model | awk '{print $1,$2}' | cut -d- -f1)
        if [ "$diskmodel" != "Flash Reader" -a "$diskmodel" != "Virtual Floppy" -a "$diskmodel" != "LCDRIVE" -a "$diskmodel" != "MAS022" ]; then
            disk_device="sd$x"
                    break
        fi
        done
    fi
    fi

    # Workaround for Dell workstations that sometimes have a CF card reader
    # - If we identify "sda" etc. as a "USB HS-<something>', set disk device to
    #    something that presumably works
    if [ "$disk_device" = "sda" ]; then
    product=$(dmidecode -s system-product-name | awk '{print $1}')
    if [ "$product" = "OptiPlex" ]; then
        for x in a b c d e; do
        diskmodel=$(cat /sys/block/sd$x/device/model | awk '{print $1,$2}' | cut -d- -f1)
        if [ "$diskmodel" != "USB HS" ]; then
            disk_device="sd$x"
                    break
        fi
        done
    fi
    fi

    # Eksempel fra en HP-maskin med kort-leser
    # sda: Compact Flash
    # sdb: SM/xD-Picture
    # sdc: SD/MMC
    # sdd: MS/MS-Pro/HG
    # sde: SD/MMC/MS/MSPRO

    # Workaround for other (HP) workstations that sometimes have a CF card reader
    if [ "$disk_device" = "sda" ]; then
        for x in sda sdb sdc sdd sde sdf nvme0n1; do
            disksize=$(cat /sys/block/$x/size)
            if [ ! -z "$disksize" -a "$disksize" -gt 0 ]; then
                disk_device="$x"
                break
            fi
        done
    fi

    # Correcting disk device for HP servers
    if [ "$disk_device" = 'cciss!c0d0' ]; then
    disk_device='cciss/c0d0'
    fi
else
    disk_device="$diskdev"
fi

# Save infor about device for post scriptlets
echo "${disk_device}" > /tmp/disk_device



# Include fysikk spefific code

  # Function that sets host-specific parameters. The current ip-address
# is used to determine what server and what directory to look in. A
# file with a name that corresponds to the macaddress and/or the
# hostname (of the computer to be installed) may exist in that
# directory and it must contain the parameters.
#
# This function can be called multiple times. For example, one
# can try to obtain the parameters (including hostname, site-admin
# and primary user) from the macaddress. If this fails, one can
# retry, using a hostname instead of the macaddress.
#
# The purpose is to allow a department to install a computer without
# having them to provide parameters manually at the start of the
# installation, or having to use a custom kickstartfile. It enables a
# user to reinstall her computer without having to obtain the
# UiO-details from IT-support.
#
# It is most useful if the department is using a database of some kind
# to keep track of computers to be installed.  The entry in the
# database is prepared first, then a stand in IT-assistant or even the
# user herself can start the installation. The next time the
# computer needs to be reinstalled, the entry from last time can
# be reused, allowing some users to reinstall the computer on their
# own intiative without having to bother anyone else - they don't
# even need to know/remember the hostname.
#
# Sometimes it is undesirable to spend time on finding out the
# macaddress of the computer before the installation. In those
# cases it is very useful that the installation asks for the
# hostname. But when a computer has already been installed once
# before, it is more convenient to have the hostname autodetected.
# Autodetection of the hostname is achieved by looking up parameters
# from the macaddress. It is assumed that some time after the
# first installation, the macaddress automatically was saved in
# the database, e.g. with the help of some daily-script or similar.
#
# The installation will still allow the user to override the network
# parameters.
#
# If no file exists on the server then this function will have no
# impact, except for the delay it takes to determine that the file
# doesn't exist. In the case of unexpected network delays, this function
# will wait no longer than 10 seconds. When this function is used on
# subnets that it isn't set up to handle, the only impact
# is the running of ifconfig twice.
#
# Author: Ola Borrebaek <ola.borrebak@fys.uio.no>
get_myparams() {

    if [ ! -x /usr/bin/nmcli ] ; then
        interfaces=`ifconfig | grep 'HWaddr' | sed 's/^\([A-Za-z][0-9:A-Za-z]\+\).*HWaddr \(.*\)$/\1=\2/'`
    else
        interfaces=`nmcli -t -f name connection show --active`
    fi
    for ifmac in $interfaces ; do
        if [ ! -x /usr/bin/nmcli ] ; then
                interface=`echo $ifmac | cut -d'=' -f1`
                macaddr=`echo $ifmac | cut -d'=' -f2`
                oldip=`ifconfig $interface | grep 'inet addr:' | sed 's/^.*inet addr:\([.0-9]\+\).*$/\1/'`
        else
                interface=$ifmac
                macaddr=`nmcli -f GENERAL.HWADDR device show $interface | awk '{print $2}'`
                oldip=`nmcli -f IP4.ADDRESS device show $interface | awk '{print $2}' | sed 's@/.*@@g'`
        fi
        deptpath=
        case $oldip in
        129.240.8[4-7].*)
                # Fysisk Institutt
        deptpath="http://tid.uio.no/it/ks"
        mymacaddr="$macaddr"
        ;;
        129.240.158.*|129.240.191.*)
                # SMN/MinaLab
        deptpath="http://tid.uio.no/it/ks"
        mymacaddr="$macaddr"
        ;;
        *)

                # Fall back to headless default install
        deptpath="http://pxe.uio.no/headless"
        mymacaddr="$macaddr"
        interactive=no

        ;;
            # pointers to other departments can be added here
        esac
        if [ "x$deptpath" != "x" ]; then
            if [ "x$1" != "x" ]; then
                filename=`echo "$1" | sed s/[.].*$//`
            else
                filename="$mymacaddr"
            fi
            if wget -T10 -q -O /tmp/params $deptpath/$filename; then
                . /tmp/params
                return 0
            fi
        fi
    done
    return 1
}



# Prompt the user for information (hostname, siteadmin, primaryuser)
# Function that sets net information parameters
get_hostinfo() {
    myname=$1
    wget -q -O /tmp/nettinfo http://pxe.uio.no/cgi-bin/net?$myname
    if egrep -q '^(No parameter received|Address is not in DNS|Not a valid address)' /tmp/nettinfo; then
        rm /tmp/nettinfo
        return 1
    else
        . /tmp/nettinfo
        return 0
    fi
}

# Function that checks if an email address is valid
valid_email() {
    addr=$1
    [ -x /usr/libexec/platform-python ] && python=/usr/libexec/platform-python
    [ -x /usr/bin/python ] && python=/usr/bin/python
    [ -x /usr/bin/python3 ] && python=/usr/bin/python3
    regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$"
    if $python -c "import sys,re; re.match('$regex','$addr') or exit(1);"; then
        return 0
    else
        return 1
    fi
}

# Attempt to look up parameters based on $name if set, or otherwise the macaddress.
# On success, $name is set, as well as other parameters.
get_myparams "$name"
get_hostinfo "$name" || name=""

# Getting network info from user
exec < /dev/tty3 > /dev/tty3 2>&1
chvt 3



ok="foo"
while [ "$interactive" != "no" -a "$ok" != "yes" ]; do

    printf "\033c"  # clear

    if [ "$ok" == "no" ]; then
        name=""
        siteadmin=""

    fi

    # ask for hostname
    echo
    while [ "x$name" == "x" ]; do
        echo
        echo '********************************************************************************'
        echo '*                                Hostname                                      *'
        echo '*                                                                              *'
        echo '*      Enter the hostname of the computer. The hostname must be registered     *'
        echo '*      in DNS for this to succeed.                                             *'
        echo '*                                                                              *'
        echo '*      Enter either the fully qualified domain name (FQDN) or the short        *'
        echo '*      name (without ".uio.no").                                               *'
        echo '*                                                                              *'
        echo '********************************************************************************'
        echo
        read -p "---> Hostname: " name
        get_hostinfo "$name" || name=""
        if [ "x$name" != "x" ]; then
            # Previous call to get_myparams failed to obtain parameters, try again
            get_myparams "$name"
        fi
    done

    # ask for site-admin
    if [ "x$siteadmin" == "x" ]; then
        printf "\033c"  # clear
        echo
        echo '********************************************************************************'
        echo '*                                Site Admin                                    *'
        echo '*                                                                              *'
        echo '*      Site-admin is the email address to the administrative contact           *'
        echo '*      for this particular machine. I.e. who should USIT contact when          *'
        echo '*      we want to reboot the machine or do something else that affects         *'
        echo '*      its stability and/or operation. Preferably, the site-admin              *'
        echo '*      should be a mailing list, NOT a personal email account.                 *'
        echo '*                                                                              *'
        echo '*      The site-admin is mandatory, but can be altered at any time by          *'
        echo '*      editing the file /etc/uio/conf/site-admin.                              *'
        echo '*                                                                              *'
        echo '********************************************************************************'
        echo
        read -p "---> Site-admin: " siteadmin
        siteadmin=$(echo $siteadmin | sed 's/ AT /@/')  # sometimes it's hard to write '@'
        valid_email $siteadmin || siteadmin=""
        while [ "x$siteadmin" == "x" ]; do
            read -p "     Enter a valid email address: " siteadmin
            siteadmin=$(echo $siteadmin | sed 's/ AT /@/')  # sometimes it's hard to write '@'
            valid_email $siteadmin || siteadmin=""
        done
    fi





    sleep 1

    # calculate disk size in MB from block size in 512 byte entities
    disk_size=$(expr $(cat /sys/block/${disk_device}/size) / 2048)

    printf "\033c"  # clear
    echo
    echo '--------------------------------------------------------------------------------'
    echo ' SUMMARY'
    echo '--------------------------------------------------------------------------------'
    echo
    echo "  * FQDN Hostname:  $fqdn"
    echo "  * IP address:     $ip"
    echo "  * Netmask:        $netmask"
    echo "  * Gateway:        $gateway"
    echo "  * Network:        $netname"
    echo "  * Description:    $description"
    echo "  * IPv6 address:   $ipv6"

    echo "  * Disk device:    $disk_device ( $disk_size MB )"
    echo "  * File system:    xfs"

    echo
    echo "  * Site-admin:     $siteadmin"

    echo
    echo '--------------------------------------------------------------------------------'
    echo

    confirm="no"

    if [ "$confirm" != "no" ]; then
        read -p "---> Is this OK [yes/no]? " ok

        while [ "$ok" != "no" -a "$ok" != "yes" ]; do
            read -p "---> Answer yes or no: " ok
        done
    else
        sleep 3
        ok="yes"
    fi
done


# Partitioning information


  # Default partition sizes

    if [ "x$sizeboot" == "x" ]; then sizeboot=1024; fi
    if [ "x$sizeroot" == "x" ]; then sizeroot=2048; fi
    if [ "x$sizevar" == "x" ]; then sizevar=6144; fi
    if [ "x$sizeopt" == "x" ]; then sizeopt=2048; fi
    if [ "x$sizetmp" == "x" ]; then sizetmp=1024; fi
    if [ "x$sizeusr" == "x" ]; then sizeusr=4096; fi

      if [ "x$sizehome" == "x" ]; then sizehome=1024; fi





  if [ "x$sizeswap" == "x" ]; then
      mem=`grep MemTotal /proc/meminfo | awk '{print $2}'`
      mem=$(( $mem / 1000000 ))
      if [ $mem -eq 0 ]; then
          sizeswap=1024
      elif [ $mem -gt 8 ]; then
          sizeswap=10240
      elif [ $mem -le 2 ]; then
          sizeswap=$(( $mem * 2 * 1024 ))
      else
          sizeswap=$(( ($mem + 2) * 1024 ))
      fi
  fi

  if [ "x$clearpart" == "xno" ]; then
      :

      # Find partitions on the disk in order to allow existing
      # partitions to be reused, i.e. to support preservation of user's
      # partitions on the disk.
      #
      # We do not intentionally avoid to support the preservation of
      # completely alien partitions, in fact we try to make our code as
      # general as possible, but we make sure that we at least support the
      # preservation of some well-known partitions, including those
      # that were created in a previous UiO installation of RHEL.
      # (An installation can fail half way and we don't want to resort
      # to manual removal of the (Linux-)partitions and logical volumes.)
      #
      # We need to find out the number of partitions, because we cannot use
      # --asprimary if there are too many partitions on the disk from before
      #
      boot=
      ntfs=
      fat=
      oldswap=
      ext=
      lvm=
      IFS=$'\n'
      numpart=0
      numext=0
      for l in `fdisk -l 2>/dev/null | grep ^/dev/$disk_device`; do
          p=`echo $l | sed "s%^/dev/\([^ ]\+\).*%\1%"`
          numpart=$(($numpart+1))
          case $l in
              *Dell*)
              echo "UiO: detected Dell-partition on $p - will ignore it"
              dell="$dell$p "
              ;;
              *NTFS*)
              echo "UiO: detected NTFS on $p"
              ntfs="$ntfs$p "
              ;;
              *FAT*)
              echo "UiO: detected FAT on $p"
              fat="$fat$p "
              ;;
              *swap*)
              echo "UiO: detected swap (not logical volume) on $p - will ignore it"
              oldswap="$oldswap$p "
              ;;
              *LVM*)
              echo "UiO: detected LVM on $p"
              lvm="$lvm$p "
              ;;
              *Linux*)
              echo "UiO: detected Linux on $p"
              ext="$ext$p "
              # We find the old /boot by looking at the tunable filesystem parameters
              lastmp=`tune2fs -l /dev/$p | grep 'Last mounted on' | sed s+^L.*/+/+`
              if [ "x$lastmp" == "x/boot" ]; then
                  boot="$p"
              fi
              numext=$(($numext+1))
              ;;
              *)
              echo "UiO: detected other partition $l - will ignore it"
              ;;
          esac
      done

      n=0

      # Below we allow the preservation of Windows partitions.  There
      # might be reasons to preserve the Windows partitions on a laptop
      # other than the desire to have dualboot at UiO.

      # NTFS
      if [ "x$ntfs" != x ]; then
          for p in $ntfs; do
              echo "UiO: preserving NTFS partition as /win$n"
              echo "part /win$n --onpart=$p --noformat" >>/tmp/part-include
              n=$(($n+1))
          done
      fi

      # FAT
      if [ "x$fat" != x ]; then
          for p in $fat; do
              echo "UiO: preserving FAT partition as /win$n"
              echo "part /win$n --onpart=$p --noformat" >>/tmp/part-include
              n=$(($n+1))
          done
      fi

      if [ "x$boot" != x ]; then
          echo "UiO: reformatting old /boot ($boot)"
          echo "part /boot --onpart=$boot" >>/tmp/part-include
          doneboot=yes
      fi

      k=1
      lastvg=
      for l in `lvm lvscan 2>/dev/null | cut -d\' -f2`; do
          vg=`echo $l | cut -d/ -f3`
          lv=`echo $l | cut -d/ -f4`
          echo "UiO: detected vg $vg, lv $lv"
          if [ "X$lastvg" != "X$vg" ]; then
              eval "donevg$vg=yes"
              p=`lvm pvscan 2>/dev/null | grep " VG $vg" | sed "s/^.* PV \([^ ]\+\) .*$/\1/" | cut -d/ -f3`
              echo "UiO: reusing pv.0$k"
              echo "part pv.0$k --onpart=$p --noformat" >>/tmp/part-include
              echo "UiO: reusing $vg"
              echo "volgroup $vg pv.0$k --noformat" >>/tmp/part-include
              lastvg=$vg
              k=$(($k+1))
          fi
          if [ "$vg" == "internvg" ]; then
              eval "donelv$lv=yes"

              if [ "$lv" == "root" ]; then lvpath="/"; else lvpath="/$lv"; fi
              if [ "$lv" == "swap" ]; then fstype="swap"; else fstype="ext4"; fi
              if [ "$lv" == "root" -o "$lv" == "swap" -o "$lv" == "var" -o "$lv" == "tmp" -o "$lv" == "usr" ]; then
                  # Reinstallation is one method of solving problems that would otherwise take too much time to
                  # debug - so we don't preserve the system partitions. It's assumed that the users have put their
                  # important data and programs elsewhere.
                  echo "UiO: reformatting $lv"
                  echo "logvol $lvpath --fstype $fstype --name=$lv --vgname=$vg --useexisting " >>/tmp/logvol-include
              else
                  # do not format /opt, /home, /site and possible others
                  echo "UiO: found $lv on $vg, will NOT reformat"
                  echo "logvol $lvpath --name=$lv --vgname=$vg --noformat" >>/tmp/logvol-include
              fi
          else
              echo "UiO: found $lv on $vg, will NOT reformat"
              # but we will mount it, to make it easier for the user to spot it
              echo "logvol /$vg-$lv --name=$lv --vgname=$vg --noformat" >>/tmp/logvol-include
          fi
      done

      # do not clear the partition table
      echo "" >/tmp/clear-include

      # do we really ever need --asprimary?
      if [ "$numpart" -gt 2 ]; then
          asprimary=""
      else
          asprimary="--asprimary"
      fi

  else
      # Partition clearing
      echo "clearpart --drives=$disk_device --initlabel --all" >/tmp/clear-include
      asprimary="--asprimary"
  fi

  # if nvme0n1 (M2) then RHEL 7 can not use default filesystem XFS (it crashes after reboot)
  if [ "x$disk_device" == "xnvme0n1" -a "rhel8" == "rhel7" ]; then
     fs="ext4"
  else
     fs=xfs
  fi


    # Required volumes
    echo 'reqpart --add-boot' >>/tmp/part-include


  if [ "x$donevginternvg" == "x" ]; then
      echo "part pv.01 $asprimary --ondisk=$disk_device --size=1 --grow" >>/tmp/part-include
      echo "volgroup internvg pv.01" >>/tmp/part-include
  fi

  if [ "x$donelvroot" == "x" ]; then
      echo "logvol / --fstype=$fs --name=root --vgname=internvg --size=$sizeroot" >>/tmp/logvol-include
  fi

  if [ "x$donelvswap" == "x" ]; then

      echo "logvol swap --fstype=swap --name=swap --vgname=internvg --size=$sizeswap" >>/tmp/logvol-include

  fi

  for lv in var opt tmp usr site home; do
    if eval [ "x\$donelv$lv" == "x" ] ; then
      if eval [ "x\$size$lv" != "x" ]; then
        eval size=\$size$lv
        # We check if $sizeXXX is set to numeric value zero. If it is, we do not create this logical volume at all.
        # This allows a department to e.g. set sizetmp=0 if they don't want a separate partition for tmp.
        if [ "$size" -gt 0 ] ; then
            echo "logvol /$lv --fstype=$fs --name=$lv --vgname=internvg --size=$size" >>/tmp/logvol-include
        fi
      fi
    fi
  done






# finish up user interaction
clear
chvt 1

# Remember IPv6 address
echo -n $ipv6 > /tmp/ipv6addr

# Remembering site-admin
echo $siteadmin >/tmp/siteadmin



# Creating network config

if [ "z$ksdevice" != "z" ]; then
   netargs[0]="--device=$ksdevice"
else
   netargs[0]="--device=bootif"
fi
netargs[1]="--activate"
netargs[2]="--bootproto=static"
netargs[3]="--hostname=$fqdn"
netargs[4]="--gateway=$gateway"
netargs[5]="--ip=$ip"
netargs[6]="--nameserver=129.240.2.27,129.240.2.40"
netargs[7]="--netmask=$netmask"
netargs[8]="--onboot=on"
if [ "z$ipv6" != "znone" ]; then
    netargs[9]="--ipv6=$ipv6"
    ipv6gw="`echo $ipv6 | cut -f1-4 -d:`::1"
    netargs[10]="--ipv6gateway=$ipv6gw"
fi
echo "network ${netargs[*]}" >/tmp/net-include


# Fedora 18 LUKS


%end


#--------------------------------------------------------------------
# POST SCRIPT (nochroot)
#--------------------------------------------------------------------
%post --interpreter /bin/sh --nochroot

# Making /etc/uio dirs
mkdir -p /mnt/sysimage/etc/uio/{info,flag,conf}

# Creating site-admin
if [ -f /tmp/siteadmin ]; then
    cat /tmp/siteadmin >/mnt/sysimage/etc/uio/conf/site-admin
fi



# Fedora 18 hack


%end


#--------------------------------------------------------------------
# POST SCRIPT (chroot)
#--------------------------------------------------------------------
%post --interpreter /bin/sh --log=/root/ks-post.log

exec < /dev/tty3 > /dev/tty3 2>&1
chvt 3

# Setting path
PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

# Helper function to run commands
run_command() {
    cmd=$1
    msg=$2
    tmpfile=$(mktemp)

    echo -n "$msg ... "

    $cmd >$tmpfile 2>&1
    cres=$?

    if [ $cres -eq 0 ]; then
        echo 'SUCCESS'
    else
        echo "FAILED - can not continue."
        echo "         Command: $cmd"
        echo
        echo "---------- ERROR MESSAGE ----------"
        cat $tmpfile
        echo
        read -p "PRESS ANY KEY TO ABORT INSTALL..."
        chvt 1
        exit 1
    fi

    rm -f $tmpfile
}

clear
echo '--------------------------------------------------------------------------------'
echo ' REGISTERING WITH RED HAT SATELLITE...'
echo '--------------------------------------------------------------------------------'
echo

# Satellite configuration
run_command 'curl -k https://satellite.uio.no/pub/katello-ca-consumer-latest.noarch.rpm -o /tmp/katello-ca-consumer-latest.noarch.rpm' \
    'Downloading certificate RPM'
run_command 'yum -y --nogpgcheck install /tmp/katello-ca-consumer-latest.noarch.rpm' \
    'Installing certificate RPM'

# RHN registration
run_command 'subscription-manager config --server.server_timeout=1200' \
    'Change subscription manager timeout to 20 minutes'
run_command 'subscription-manager register --org=UiO --activationkey=satellite' \
    'Running subscription-manager'
run_command 'subscription-manager config --server.server_timeout=180' \
    'Revert subscription manager timeout'

# Enabling repos
run_command 'subscription-manager repos --enable=rhel-8-for-x86_64-baseos-rpms --enable=rhel-8-for-x86_64-appstream-rpms --enable=rhel-8-for-x86_64-supplementary-rpms --enable=satellite-tools-6.7-for-rhel-8-x86_64-rpms --enable=codeready-builder-for-rhel-8-x86_64-rpms' \
    'Enabling extra RHEL repositories'

# Import google gpg key
run_command 'rpm --import https://dl.google.com/linux/linux_signing_key.pub' 'Importing Google Chrome repo GPG key'

# Installing katello-agent
run_command 'yum -y install katello-agent' 'Installing katello-agent'

# Cleanup
rm -f /tmp/katello-ca-consumer-latest.noarch.rpm

# Running yum
echo
echo '--------------------------------------------------------------------------------'
echo ' UPDATING PACKAGES...'
echo '--------------------------------------------------------------------------------'
echo
yum -y upgrade

# Setting repo priorities
run_command 'dnf config-manager --save --setopt=priority=10 rhel-8-for-x86_64-baseos-rpms rhel-8-for-x86_64-appstream-rpms rhel-8-for-x86_64-supplementary-rpms satellite-tools-6.7-for-rhel-8-x86_64-rpms codeready-builder-for-rhel-8-x86_64-rpms' \
    'Setting repository options (mostly priorities)'

# Installing uio repo
echo
echo '--------------------------------------------------------------------------------'
echo ' INSTALLING UIO REPOS...'
echo '--------------------------------------------------------------------------------'
echo
run_command 'yum -y --nogpgcheck install http://rpm.uio.no/uio-el8-free/latest/x86_64/Packages/u/uio-release-8-1.el8.noarch.rpm' \
    'Installing UiO repositories'
run_command 'rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-uio-el8-free' \
    'Importing UiO repository GPG key'

# Installing EPEL
echo
echo '--------------------------------------------------------------------------------'
echo ' INSTALLING EPEL REPO...'
echo '--------------------------------------------------------------------------------'
echo
http_proxy=http://update.uio.no:3128 \
    run_command 'yum -y --nogpgcheck install http://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm' \
    'Installing EPEL repository'
run_command 'rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8' \
    'Importing EPEL repository GPG key'
run_command 'dnf config-manager --save --setopt=*.proxy=http://update.uio.no:3128/ epel epel-modular epel-testing' \
    'Setting UiO proxy for EPEL repository'
unset http_proxy



# Turning on sssd
/bin/systemctl enable sssd.service







# Fixing 1st login problems related to SELinux and NFS homedirs
echo "Creating UiO home dir mount points... "
mkdir /admin
mkdir /use
mkdir /usit
mkdir /med
mkdir /odont
mkdir /mn
mkdir /hf
mkdir /sv
mkdir /jus
mkdir /rh
mkdir /tf
mkdir /div
mkdir /ub
mkdir /uv
mkdir /ifi
mkdir /uio

# SElinux contexts
echo "Restoring SELinux contexts, if needed..."
restorecon -R /var /etc /root /home
restorecon /admin
restorecon /use
restorecon /usit
restorecon /med
restorecon /odont
restorecon /mn
restorecon /hf
restorecon /sv
restorecon /jus
restorecon /rh
restorecon /tf
restorecon /div
restorecon /ub
restorecon /uv
restorecon /ifi
restorecon /uio

# Removing gnome-initial-setup, is was installed even though we didn't want it
rpm -q --quiet gnome-initial-setup && dnf -y remove gnome-initial-setup


echo
echo '--------------------------------------------------------------------------------'
echo ' CONFIGURING VIRTPROV'
echo '--------------------------------------------------------------------------------'
echo
# Installing Virtprov provisioning scripts

echo "Giving virtprov root access during installation.. (CFengine overrides this afterwards)"
# Make sure sshd_config exists
sshd_config_file="/etc/ssh/sshd_config"
if [[ ! -e "$sshd_config_file" ]]; then
    echo "creating $sshd_config_file"
    mkdir -p "/etc/ssh"
    touch "$sshd_config_file"
else
    echo "$sshd_config_file exists!"
fi
root_login="PermitRootLogin"
# Makes sure 'PermitRootLogin yes' is in the file either by replace or append
echo "Permitting root login for virtprov"
if grep -Eq "$root_login" "$sshd_config_file"
  then
    echo "$root_login does exist in file. Overriding.."
    sed -E -i "s/.*$root_login.*/$root_login yes/g" "$sshd_config_file"
  else
    echo "$root_login does not exist in file. Appending.."
    echo "$root_login yes" >> "$sshd_config_file"
fi
# Double check that the line actually exists
if grep -Eq "^$root_login yes" "$sshd_config_file"
  then
    echo "Virtprov root login enabled"
  else
    echo "Virtprov root login not enabled!"
fi

echo "Installing Virtprov provisioning scripts"
yum install -y virtprov.x86_64

echo "Virtprov config completed"



# Installing Virtprov provisioning scripts
echo "Installing cloud init provisioning scripts"
yum install -y cloud-init
touch /etc/cloud/cloud-init.disabled


# Set selinux boolean to allow NFS home dirs
setsebool -P use_nfs_home_dirs on





# Set password for virtual user (usually virtmgmt) make sure to use '' and not "" around password! bash expansion
useradd virtmgmt --system --create-home -d /var/lib/virtmgmt --comment "Provisioning user for vmware vRA"
usermod -p '$6$j4138rwirw$zqbX7IFYoeWocTiAhm/vuqeHI7snnSR8vDzIE1i.jTd.7ELXPxA4Rvo63mx88pjQoYOjv0le4AiYZJemgpzlN0' virtmgmt


sleep 1
chvt 1



%end
